"""
Домашка:
1. Доступ/посилання до GITHUB у LMS:
    1) Iryna Zavtonova - немає посилання
    2) До Данг Ха Мі - немає посилання
    3) Khmelnytslyi Oleksandr - немає посилання
    4) Павел Смирнов - немає посилання
    5) Oleksandr Brusyltsev - немає посилання
    6) Victoria Gorbunova - нет ДЗ
    7) Arsen Andreichuk - нет ДЗ
    8) Pavlo - немає ДЗ
    9) Diana T - немає ДЗ


2.	Не забувайте про PEP-8 (CTRL + ALT + L) * Павло Смирнов
a=1     - ні
a = 1   - так



3. Приклади вирішень:
'#' * 9   - в python можна помножувати строки


4. Тести де були помилки:
print


5. Не забувайте про проходження тесту перед заняттям


6. Питання
1) Навіщо потрібен символ \n
2) Що буде якщо я спробую це запустити і чому: print("hello')
3) Чим оперативна пам'ять відрізняється від постійної пам'яті ?

План на сьогодні:
1. Змінні
- Навіщо вони потрібні
- Як їх зберігає Python
- Збирач сміття (garbage collector) -
2. Типи даних
3. Числові типи
4. Строка
5. swap
6. Обговорення ДЗ

"""
# Назви змінних
count_one = 1234  # shake_case  - ТАК
countOneTwoThree = 123  # camelCase   - НІ

# Константи - незмінні значення
# Створюємо ВЕЛИКИМИ_БУКВАМИ
NAME = '123'

# Якщо потрібно назвати змінну вже зарезервованим ім'ям - використовуйте _ в кінці назви
int_ = 1

# Змінна - Ім'я - яке посилається на значення
# PyObject - "об'єкт" який зберігається в ОП.
# Зберігає 3 значення:
# 1. type - тип даних
# 2. value - значення
# 3. ref count - кількість посилань

# Типи даних
# 1. int (integer) - цілі числа
# 2. float - дробні числа
# 3. str (string) - строка

# Операції над числами:
# ** - СТЕПІНЬ
# // - ЦІЛОЧИСЛЕННЕ ДІЛЕННЯ
# %  - ОСТАЧА ВІД ДІЛЛЕНЯ
# та інші...

# Функції для зміни типу даних:
# int() - перетворює значення на тип int
# float() -  перетворює на float
# str() - перетворює значення в строку

# Додаткові функції:
# type(значення) - показує тип даних
# repr(значення) - показує детальну інформацію про значення
# id(значення) - показує адрес де зберігається це значення

# int, float, str - не змінний тип даних

x1 = 10  # int
x2 = '10'  # str
x3 = "10"  # str
x4 = """"""  # str
x5 = ''''''  # str
x6 = 10.5  # float


"""
\n - перехід на нову строку
\t - TAB
\'  \" - екранування

Конкатенація - додавання двух строк
"""

# Робота з функуціями
# int()
# float()
# str()
age = 50
print('Мені' + str(age))  # 'Мені ' + '50'

# РОБОТА ЗІ СТРОКОЮ
# Метод = функція = має доступ через . - знає про те з ким працює
# len(строка) - рахує кількість елементів у послідовності
# послідовність - hello -> h e l l o
x = 'HELoO'
print(x.upper())

y = 'world'
print(len(y))

# Індекс - порядковий номер елементу в послідовності (str)
# w o r l d
# 0 1 2 3 4
# y[2] -> 'r' -> r[1] -> 'r' -> r[0]
#          0
print(y[2])

k = 'VBAD1DFGITRM'  # VADIM
#    0123456789
#                     3
print(k[0] + k[2] + k[k.find('D')])

#             k.find('D', 4)
first_d = k.find('D')  # 3
first_d += 1  # 4
result = k.find('D', first_d)
print('Друга D:', result)  # 5

"""
Популярні методи строк:
find
rfind
strip
rstrip
split
upper 
lower 
"""
k = 'DF df fg'
print(repr(k.upper()))
print(repr(k.lower()))

# Зріз - копіює строку по індексам
# [start:end] - копіює строку не включаючи останній символ
# [start:end:step] -
k = 'hello world'
#    012345678910
#             -1
print(len(k))
last_index = len(k) - 1
print(k[::-1])

# Форматування строк
name = 'Вася'
print('Привіт', name)   # можливості print
print('Привіт ' + name)  # конкатенація
print('Привіт %s' % name)  # %-спосіб
print('Привіт {} {}'.format(name, '123'))   # метод format
print(f'Привіт {name}')  # f-string

print(f'{name:*^30}')  # f string

